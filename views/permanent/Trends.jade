extends layout

block append head
	<link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family=Open+Sans:400,600">
	<meta charset="UTF-8">
	<meta content="utf-8" http-equiv="encoding"> 

block content
	.titlePad
		h1 Trends in Civic Engagement Florida
	script(src='/javascripts/d3.js', charset='utf-8')
	<script src="/javascripts/topojson.v1.min.js"></script>
	<script src="/javascripts/jquery-1.11.0.min.js"></script>
	script(type='text/javascript').
	div.trends
		.donut#donut(data-donut='34')
		.donut#donut2(data-donut='77')
		.donut#donut3(data-donut='37')
	<script src="http://d3js.org/d3.v3.min.js"></script>
	script.
		var duration   = 500,
		transition = 200;

		drawDonutChart(
			'#donut',
			$('#donut').data('donut'),
				190,
				190,
				".35em"
		);
		drawDonutChart(
			'#donut2',
			$('#donut2').data('donut'),
				190,
				190,
				".35em"
		);
		drawDonutChart(
			'#donut3',
			$('#donut3').data('donut'),
				190,
				190,
				".35em"
		);

		function drawDonutChart(element, percent, width, height, text_y) {
			width = typeof width !== 'undefined' ? width : 10;
			height = typeof height !== 'undefined' ? height : 10;
			text_y = typeof text_y !== 'undefined' ? text_y : "-.10em";

			var dataset = {
				lower: calcPercent(0),
				upper: calcPercent(percent)
				},
				radius = Math.min(width, height) / 2,
				pie = d3.layout.pie().sort(null),
				format = d3.format(".0%");

			var arc = d3.svg.arc()
				.innerRadius(radius - 40)
				.outerRadius(radius);

			var svg = d3.select(element).append("svg")
				.attr("width", width)
				.attr("height", height)
				.append("g")
				.attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

			var path = svg.selectAll("path")
				.data(pie(dataset.lower))
				.enter().append("path")
				.attr("class", function(d, i) { return "color" + i })
				.attr("d", arc)
				.each(function(d) { this._current = d; }); // store the initial values

			var text = svg.append("text")
				.attr("text-anchor", "middle")
				.attr("dy", text_y);

			if (typeof(percent) === "string") {
				text.text(percent);
				}
			else {
				var progress = 0;
				var timeout = setTimeout(function () {
					clearTimeout(timeout);
					path = path.data(pie(dataset.upper)); // update the data
					path.transition().duration(duration).attrTween("d", function (a) {
						// Store the displayed angles in _current.
						// Then, interpolate from _current to the new angles.
						// During the transition, _current is updated in-place by d3.interpolate.
						var i  = d3.interpolate(this._current, a);
						var i2 = d3.interpolate(progress, percent)
						this._current = i(0);
						return function(t) {
							text.text( format(i2(t) / 100) );
							return arc(i(t));
							};
						}); // redraw the arcs
					}, 200);
				}
		};

		function calcPercent(percent) {
			return [percent, 100-percent];
		};
